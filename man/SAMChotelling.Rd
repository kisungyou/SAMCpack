% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SAMChotelling.R
\name{SAMChotelling}
\alias{SAMChotelling}
\title{Two-sample Hotelling's T-squared test with Resampling-based SAMC}
\usage{
SAMChotelling(x, y, niter = 1e+05, m = 300, t0 = 1000, sample.ratio = 0.05)
}
\arguments{
\item{x}{matrix of \emph{1st} sample.}

\item{y}{matrix of \emph{2nd} sample.}

\item{niter}{number of SAMC iterations.}

\item{m}{number of partition refinement.}

\item{t0}{gain factor control at which sequence starts to decrease.}

\item{sample.ratio}{ratio in \eqn{(0,1)} at which resampling is performed.}
}
\value{
a named list containing \describe{
\item{p.val}{estimated \eqn{p}-value.}
\item{statistic}{observed statistic.}
\item{acceptance}{ratio of accepted runs from \code{niter} iterations.}
\item{frequency}{visiting frequency of energy partition.}
\item{max.error}{maximal discrepancy. Rule of thumb to determine convergence when the value is \eqn{< 0.2}.}
}
}
\description{
SAMC is used to estimate (possibly) extremal \eqn{p}-value (e.g. smaller than \eqn{1e-6}) 
for two-sample Hotelling's T-squared test with multivariate samples as an alternative to naive permutation test.
}
\examples{
\dontrun{
## generate samples from normal distribution for small p-value
x = matrix(rnorm(100*3),nrow=100)          # standard normal
y = matrix(rnorm(100*3,mean=0.3),nrow=100) # mean are (0.5,0.5,0.5)

## run SAMCttest with different partition scales
#    default iteration of 1e+5 subsamples are used.
res1 = SAMChotelling(x,y,m=100)
res2 = SAMChotelling(x,y,m=300)
res3 = SAMChotelling(x,y,m=500)
## we also use 1e+4 permutations 
require(Hotelling) 
hot.asym = Hotelling::hotelling.test(x,y)
hot.perm = Hotelling::hotelling.test(x,y,perm=TRUE,B=1e+5)

## compare with true p-value from 't.test' and permutation test
printer <- paste(
  "=========================================\n",
  "      Compare Different p-values\n",
  "=========================================\n",
  "1. Hotelling     : ",hot.asym$pval,
  "\n2. SAMCttest",
  "\n      2-1. m=100 : ",res1$p.val,
  "\n      2-2. m=300 : ",res2$p.val,
  "\n      2-3. m=500 : ",res3$p.val,
  "\n3. Permutation   : ",hot.perm$pval, sep="")
writeLines(printer)

## visualize visiting frequency
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3))
barplot(res1$frequency/1e+5, main=paste("max.error=",res1$max.error,sep=""))
barplot(res2$frequency/1e+5, main=paste("max.error=",res2$max.error,sep=""))
barplot(res3$frequency/1e+5, main=paste("max.error=",res3$max.error,sep=""))
par(opar)
}

}
\references{
\insertRef{yu_efficient_2011}{SAMCpack}
}
