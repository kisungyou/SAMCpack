% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SAMCttest.R
\name{SAMCttest}
\alias{SAMCttest}
\title{Two-sample t-Test with Resampling-based SAMC}
\usage{
SAMCttest(x, y, var.equal = FALSE, niter = 1e+05, m = 300,
  t0 = 1000, sample.ratio = 0.05)
}
\arguments{
\item{x}{vector of \emph{1st} sample.}

\item{y}{vector of \emph{2nd} sample.}

\item{var.equal}{logical; indicating whether to assume two samples have same variance.}

\item{niter}{number of SAMC iterations.}

\item{m}{number of partition refinement.}

\item{t0}{gain factor control at which sequence starts to decrease.}

\item{sample.ratio}{ratio in \eqn{(0,1)} at which resampling is performed.}
}
\value{
a named list containing \describe{
\item{p.val}{estimated \eqn{p}-value.}
\item{statistic}{observed statistic.}
\item{acceptance}{ratio of accepted runs from \code{niter} iterations.}
\item{frequency}{visiting frequency of energy partition.}
\item{max.error}{maximal discrepancy. Rule of thumb to determine convergence when the value is \eqn{< 0.2}.}
}
}
\description{
SAMC is used to estimate (possibly) extremal \eqn{p}-value (e.g. smaller than \eqn{1e-6}) 
for two-sample \emph{t}-test with univariate samples as an alternative to naive permutation test. 
Both equal and unequal variance assumptions are supported.
}
\examples{
\dontrun{
## generate samples from normal distribution for small p-value
x = rnorm(100, 0, 1) # mean = 0, sd = 1
y = rnorm(100, 1, 1) # mean = 1, sd = 1

## run SAMCttest with different partition scales
#    default iteration of 1e+4 subsamples are used.
res1 = SAMCttest(x,y,m=100)
res2 = SAMCttest(x,y,m=300)
res3 = SAMCttest(x,y,m=500)

## we also use 1e+5 permutations 
require(DAAG) # permutation-based t-test
perm.p = DAAG::twotPermutation(x1=x,x2=y, nsim=1e+7, plotit=FALSE)

## compare with true p-value from 't.test' and permutation test
printer <- paste(
  "=========================================\\n",
  "      Compare Different p-values\\n",
  "=========================================\\n",
  "1. t.test result : ",stats::t.test(x,y)$p.val,
  "\\n2. SAMCttest",
  "\\n      2-1. m=100 : ",res1$p.val,
  "\\n      2-2. m=300 : ",res2$p.val,
  "\\n      2-3. m=500 : ",res3$p.val,
  "\\n3. Permutation   : ",perm.p, sep="")
writeLines(printer)

## visualize visiting frequency
par(mfrow=c(1,3))
barplot(res1$frequency/1e+5, main=paste("max.error=",res1$max.error,sep=""))
barplot(res2$frequency/1e+5, main=paste("max.error=",res2$max.error,sep=""))
barplot(res3$frequency/1e+5, main=paste("max.error=",res3$max.error,sep=""))
}

}
\references{
\insertRef{yu_efficient_2011}{SAMCpack}
}
